name: sysuh3c

on: 
  workflow_dispatch:
  
jobs: 
  Complie: 
    name: Complie the ipk file
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2
           
      - name: Install Environment
        run: |
          wget https://downloads.openwrt.org/snapshots/targets/sunxi/cortexa53/openwrt-sdk-sunxi-cortexa53_gcc-11.2.0_musl.Linux-x86_64.tar.xz
          tar -xvJf openwrt-sdk-sunxi-cortexa53_gcc-11.2.011.2.0_musl.Linux-x86_64.tar.xz
          cd openwrt-sdk-sunxi-cortexa53_gcc-11.2.0_musl.Linux-x86_64
          git clone https://github.com/LGA1150/openwrt-sysuh3c.git package/openwrt-sysuh3c
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
      - name: Install dependency
        run: sudo apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync
        
      - name: Complie
        run: |
          cp .config openwrt-sdk-sunxi-cortexa53_gcc-11.2.0_musl.Linux-x86_64/
          cd openwrt-sdk-sunxi-cortexa53_gcc-8.4.0_musl.Linux-x86_64
          make package/luci-app-sysuh3c/compile V=s
          
      - name: Package
        run: |
          cd openwrt-sdk-sunxi-cortexa53_gcc-11.2.0_musl.Linux-x86_64/bin/packages/aarch64_cortex-a53/base/
          zip -r artifact.zip ./*
          ls -alF .
          
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with: 
          name: IPK
          path: openwrt-sdk-sunxi-cortexa53_gcc-11.2.0_musl.Linux-x86_64/bin/packages/aarch64_cortex-a53/base
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v1.0
          release_name: Release
          draft: false
          prerelease: false
        
      - name: Upload Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: openwrt-sdk-sunxi-cortexa53_gcc-11.2.0_musl.Linux-x86_64/bin/packages/aarch64_cortex-a53/base/artifact.zip
          asset_name: artifact.zip
          asset_content_type: application/zip
          
          





